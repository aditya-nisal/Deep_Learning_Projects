# -*- coding: utf-8 -*-
"""q_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-AU9aQzzNKMOmxJQqWZgxKtzZ_ZuQpbj
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.applications.resnet50 import ResNet50
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Flatten
from tensorflow.keras.models import Model
from keras.callbacks import ModelCheckpoint

# Load the data into NumPy arrays
faces_greyscale = np.load('/content/faces.npy')
print("faces.shape:", faces_greyscale.shape)
age_labels = np.load('/content/ages.npy')
print("ages.shape:", age_labels.shape)
# matrix = np.array([faces_greyscale, age_labels])

# # Select 80% of numbers randomly using np.random.choice
selected_numbers = np.random.choice(faces_greyscale.shape[0], size=int(0.8*(faces_greyscale.shape[0])), replace=False)
all_indices = np.arange(faces_greyscale.shape[0])
test_indices = np.setdiff1d(all_indices, selected_numbers)

faces_greyscale_trainval = faces_greyscale[selected_numbers]
age_labels_trainval = age_labels[selected_numbers]
# print(faces_greyscale_trainval.shape)
# print(age_labels_trainval.shape)
faces_rgb_trainval = np.repeat(faces_greyscale_trainval[..., np.newaxis], 3, axis = -1)
faces_rgb_trainval = faces_rgb_trainval.astype('float32') / 255.0

#Training
faces_rgb_train = faces_rgb_trainval[:5500]
age_labels_train = age_labels_trainval[:5500]

#Validation
faces_rgb_val = faces_rgb_trainval[5500:]
age_labels_val = age_labels_trainval[5500:]

#Test
faces_greyscale_test = faces_greyscale[test_indices]
age_labels_test = age_labels[test_indices]
faces_rgb_test = np.repeat(faces_greyscale_test[..., np.newaxis], 3, axis = -1)
faces_rgb_test = faces_rgb_test.astype('float32') / 255.0

print(faces_rgb_train.shape)
print(age_labels_train.shape)
print(faces_rgb_val.shape)
print(age_labels_val.shape)
print(faces_rgb_test.shape)
print(age_labels_test.shape)
# Creating a TensorFlow dataset from the NumPy arrays
dataset = tf.data.Dataset.from_tensor_slices((faces_rgb_trainval, age_labels_trainval))

print("data:", faces_rgb_trainval.shape, "labels:", age_labels_trainval.shape)
plt.imshow(faces_rgb_train[1])
print("Age of this person is:", age_labels_train[1].astype('int'))

# input_shape = (224, 224, 3)
# num_classes = 1

# train_images = tf.image.resize(faces_rgb_train, (input_shape[0], input_shape[1]))
# val_images = tf.image.resize(faces_rgb_val, (input_shape[0], input_shape[1]))
# test_images = tf.image.resize(faces_rgb_test, (input_shape[0], input_shape[1]))

age_labels_train = age_labels_train.astype('float32')
age_labels_val = age_labels_val.astype('float32')
age_labels_test = age_labels_test.astype('float32')
print(faces_rgb_train.shape)
print(age_labels_train.shape)
print(age_labels_test.shape)

#Creating and training the Resnet50 model

#Loading the ResNet50 model from tensorflow
resnet_model = ResNet50(weights='imagenet', include_top = False, input_shape = (48,48,3))  
#Imagenet-using pretrainied weights, include_top-removing the last FC network to output a real number hence False

#Freexing the layers
for layer in resnet_model.layers:
  layer.trainable = False

#Replacing the last layer with a new dense layer to get a real number as an output
# x = Dense(1, activation='linear')(resnet_model.layers[-2].output)
# x = resnet_model.output
# x = GlobalAveragePooling2D()(x)
# x = Dense(256,activation='relu')(x)
# x = Dense(128,activation='relu')(x)
# x = Dense(1, activation='linear')(x)
x=Flatten()(resnet_model.output)
x=Dense(256,activation='relu')(x)
x=Dense(128,activation='relu')(x)
x = Dense(1)(x)

#Creating a new model
model = Model(inputs=resnet_model.input, outputs=x)

#Compiling the model
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.00025), loss='mse', metrics=['mse'])
checkpointer = ModelCheckpoint(filepath='final_model.weights.best.hdf5', verbose=1, save_best_only=True)
#Training the model
history = model.fit(faces_rgb_train, age_labels_train, epochs = 30, batch_size = 32, validation_data=(faces_rgb_val, age_labels_val), callbacks=[checkpointer])

results = model.evaluate(faces_rgb_test, age_labels_test, batch_size=32)
print("Test RMSE = ", np.sqrt(results[1]))